Useful MYSQL syntax

SHOW DATABASES;
SHOW TABLES;
SHOW FIELDS FROM {table name};


RAILS useful cli

rails generate model {ModelName} [OPTIONAL: fields]{field1:{datatype}}
    - It will generate new model and it's related files
    - e.g. rails generate model User first_name:string last_name:string age:integer remarks:text
        - Adding the OPTIONAL will automatically generate the fields as well

rails db:migrate [OPTIONAL: VERSION]{VERSION=0}
    - Will migrate all created/generated model
    - e.g. rails db:migrate VERSION=0
        - if VERSION=0, revert to the very first schema.
        - if VERSION={versionnumber}, will migrate up to the specified versionnumber
            - to see the list of version number, "SELECT * FROM schema_migrations"
        - if no specified VERSION, will run all the migration versions


MODEL NOTES:
- no need to specify ID fields, rails will automatically generate it
- To do implement foreign key, conenct parent to child, you can do the following syntax:
    - t.integer :{foreignKey field_name}, index:true
        - e.g. t.integer :subject_id, index:true
    - t.references :{parent model name}
        - e.g. t.references :subject
    - t.belongs_to :{parent model name}
        - e.g. t.belongs_to :subject
- In our generate models, pages is the child and subjects is the parent.

Migrations
    - It allows you to modify your database schema within your Rails application


ACTIVE RECORD
- general approach of design pattern for relational database in any prog. lang.


ActiveRecord
- Rails implementation of active record design pattern
- It helps to retrieve and manipulate data as objects, and not as statuc rows
- it understand fully the structure of the table
- it can manipulate data as objects then saved easily



RAILS CONSOLE
- run 'rails c'

CREATE NEW RECORD via SAVE
- Instaniate the object
 the object
    - {instance object} = {Table name}.new([OPTIONAL]{fields})
    - subject = Subject.new(:name => 'First Subject', :visible => true)
- Assign field value
    - {instance object}.{fieldname} = {value}
    - subject.position = 1
- Save the added field
    - {instance object}.Save
    - subject.save


CREATE NEW RECORD via CREATE
- Instaniate the object
    - {instance object} = {Table name}.create([OPTIONAL]{fields}) // Required fields, must have a value before creating
    - subjectNew = Subject.create(:name => 'Second Subject', :visible => false)

NOTES:
 - run {instance variable}.new_record? to check if the fields values are already save in the table name
 - subject.new_record?
 -if creating new record via create, the record will automaticall save to the table and running the _.new_record? will always return true


UPDATE RECORD via SAVE
- Instaniate the object and find the ID
    - {instance object} = {Table name}.find({ID})
    - subject = Subject.find(1)
- Assign field value
    - {instance object}.{fieldname} = {value}
    - subject.name = 'Initial Subject'
- Save the added field
    - {instance object}.Save
    - subject.save


UPDATE RECORD via UPDATE
- Instaniate the object and find the ID
    - {instance object} = {Table name}.find({ID})
    - subject2 = Subject.find(2)
- Update the record
    - {instance.object}.update({List of Fields to be updated})
    - subject2.update(:name => 'Next Subject', :position => 2)


DELETE RECORD
- Instaniate the object and find the ID
    - {instance object} = {Table name}.find({ID})
    - subject = Subject.find(3)
- Destroy the record 
    - {instance object}.Destroy
    - subject.destroy
- Note:
    - once you destroy the instance object, the record in the table is deleted.
    - However, the instance object still has a value good for inspection.
    - it is calle Ruby Frozen (hash)


FIND RECORD

via Primary key finder
    - {Table name}.find({ID})
    - Subject.find(1)

via Conditions
    - {instance object} = {Table name}.where({conditions}})
    - Subject.where(:visible => true, :position => 1..3) // using ruby has as params
        - 1..3 is a range to where the position will look
        - 1..3 = [1, 2, 3]
        - [ 1, 2, 3] is more dynamic, you can only specify values you want to filter unlike with range.
    - Subject.where("visible = 1 AND position < 10") // using SQL fragment
        - NOTE:
            - Never use string interpolation
                - User.where("first_name LIKE #{@query}")
                - This could cause SQL interjection
            - Instead, Use Array with format string
                - User.where(["first_name LIKE ? ", @query])
                - the '?' means the place of the second array argument.
                - you can add as many '?' as you want depending on the number of args to be pass in respective order


Associations between models
- The process of building a relationships between models
- e.g. First
    - subject = Subject.find(1) // Will get the value with id = 1
    - page = Page.new(:name => 'First Page', :visible => true, :position => 1) // will create new instance of a class
    - page.subject = subject // will add relationships between pages to the subject, subject is the parent
    - page.save // to save the created instance to the table
- e.g. Second
    - secondPage = Page.new(:name => 'Second Page', :visible => true, :position =>2) // will create new instanec of a class
    - subject.pages << secondPage
        - '<<' will append the secondPage instance of a class to the subject.pages relationship